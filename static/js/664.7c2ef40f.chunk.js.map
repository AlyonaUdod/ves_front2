{"version":3,"file":"static/js/664.7c2ef40f.chunk.js","mappings":"uNASMA,EAAiB,SAAAC,GACrBC,QAAQC,IAAI,UAAWF,EACxB,EAsID,UApIkB,WAChB,IAAMG,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IACxBC,EAAUC,EAAAA,OAAa,MACvBC,GAAWC,EAAAA,EAAAA,MAsBjB,OACE,SAAC,IAAD,CACEC,OACE,iCACE,SAAC,KAAD,CAAQC,KAAK,OAAOC,SAAS,SAASC,QAjBlB,WAAO,IAAD,EAChC,UAAAP,EAAQQ,eAAR,SAAiBC,eAAe,CAC9BC,MAAO,qBACPC,SAAU,YAEb,EAYO,4BAGA,SAAC,KAAD,CAAQN,KAAK,OAAOC,SAAS,SAASC,QAdxB,WAAO,IAAD,EAC1B,UAAAP,EAAQQ,eAAR,SAAiBC,eAAe,CAC9BC,MAAO,oBACPC,SAAU,WAEb,EASO,wBANN,UAYE,UAAC,IAAD,CACEC,KAAK,QACLC,OAAO,WACPC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAERE,MAAO,CACLC,MAAO,KAMTC,SAjDW,SAAAC,GACflB,GAASmB,EAAAA,EAAAA,IAAMD,GAEhB,EA+CK3B,eAAgBA,EAEhB6B,IAAKtB,EAnBP,WAsBE,SAAC,SAAD,CACEuB,QAAQ,SAAC,IAAD,CAAcC,UAAU,wBAChCZ,KAAK,QACLa,MAAM,QACNC,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,4BAEX,CACEvB,KAAM,UAVZ,UAcE,SAAC,IAAD,OAeF,SAAC,SAAD,CACEkB,QAAQ,SAAC,IAAD,CAAcC,UAAU,wBAChCC,MAAM,WACNb,KAAK,WACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,gCAPf,UAWE,SAAC,aAAD,OAcF,UAAC,SAAD,CACEZ,WAAY,CACVa,OAAQ,EACRd,KAAM,IAHV,WAME,SAAC,KAAD,CAAQE,MAAO,CAACa,YAAa,QAASzB,KAAK,UAAUC,SAAS,SAASyB,QAAuB,UAAdlC,EAAhF,qBAGA,SAAC,KAAD,CAAQS,SAAS,SAASC,QAlHlB,WAAO,IAAD,EACpB,UAAAP,EAAQQ,eAAR,SAAiBwB,aAClB,EAgHO,0BAOT,C","sources":["pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import React from 'react';\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\n\nimport { Button, Form, Input, Card } from 'antd';\n// import { FormWrapper } from './LoginPage.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthOperation } from 'redux/auth/authSelectors';\nimport { logIn } from 'redux/auth/authOperations';\n\nconst onFinishFailed = errorInfo => {\n  console.log('Failed:', errorInfo);\n};\n\nconst LoginPage = () => {\n  const isLoading = useSelector(selectAuthOperation)\n  const formRef = React.useRef(null);\n  const dispatch = useDispatch();\n\n  const onFinish = values => {\n    dispatch(logIn(values))\n    // console.log(values);\n  };\n  const onReset = () => {\n    formRef.current?.resetFields();\n  };\n  const onFillAdministrator = () => {\n    formRef.current?.setFieldsValue({\n      email: 'sometest@gmail.com',\n      password: 'sometest',\n    });\n  };\n  const onFillManager = () => {\n    formRef.current?.setFieldsValue({\n      email: 'manager@gmail.com',\n      password: 'manager',\n    });\n  };\n\n  return (\n    <Card\n      extra={\n        <>\n          <Button type=\"link\" htmlType=\"button\" onClick={onFillAdministrator}>\n            Administrator\n          </Button>\n          <Button type=\"link\" htmlType=\"button\" onClick={onFillManager}>\n            Manager\n          </Button>\n        </>\n      }\n    >\n      <Form\n        name=\"basic\"\n        layout=\"vertical\"\n        labelCol={{\n          span: 8,\n        }}\n        wrapperCol={{\n          span: 24,\n        }}\n        style={{\n          width: 600,\n          // minWidth: 600,\n        }}\n        // initialValues={{\n        //   remember: true,\n        // }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        // autoComplete=\"off\"\n        ref={formRef}\n      >\n        {/* <h2>Login</h2> */}\n        <Form.Item\n          prefix={<UserOutlined className=\"site-form-item-icon\" />}\n          name=\"email\"\n          label=\"Email\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your email!',\n            },\n            {\n              type: 'email',\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        {/* <Form.Item\n          label=\"Username\"\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: \"Please input your username!\"\n            }\n          ]}\n        >\n          <Input />\n        </Form.Item> */}\n\n        <Form.Item\n          prefix={<LockOutlined className=\"site-form-item-icon\" />}\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your password!',\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        {/* <Form.Item\n          name=\"remember\"\n          valuePropName=\"checked\"\n          // wrapperCol={{\n          //   offset: 8,\n          //   span: 16,\n          // }}\n        >\n          <Checkbox>Remember me</Checkbox>\n        </Form.Item> */}\n\n        <Form.Item\n          wrapperCol={{\n            offset: 8,\n            span: 16,\n          }}\n        >\n          <Button style={{marginRight: '24px'}} type=\"primary\" htmlType=\"submit\" loading={isLoading === 'login'}>\n            Submit\n          </Button>\n          <Button htmlType=\"button\" onClick={onReset}>\n            Reset\n          </Button>\n        </Form.Item>\n      </Form>\n    </Card>\n  );\n};\n\nexport default LoginPage;\n"],"names":["onFinishFailed","errorInfo","console","log","isLoading","useSelector","selectAuthOperation","formRef","React","dispatch","useDispatch","extra","type","htmlType","onClick","current","setFieldsValue","email","password","name","layout","labelCol","span","wrapperCol","style","width","onFinish","values","logIn","ref","prefix","className","label","rules","required","message","offset","marginRight","loading","resetFields"],"sourceRoot":""}